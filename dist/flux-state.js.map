{"version":3,"sources":["webpack://flux-state/webpack/universalModuleDefinition","webpack://flux-state/webpack/bootstrap","webpack://flux-state/./node_modules/rxjs/util/root.js","webpack://flux-state/./node_modules/rxjs/Subscription.js","webpack://flux-state/./node_modules/rxjs/symbol/rxSubscriber.js","webpack://flux-state/./node_modules/rxjs/Subscriber.js","webpack://flux-state/./node_modules/rxjs/util/isFunction.js","webpack://flux-state/./node_modules/rxjs/util/errorObject.js","webpack://flux-state/./node_modules/rxjs/Observer.js","webpack://flux-state/./node_modules/rxjs/Subject.js","webpack://flux-state/external {\"commonjs\":\"flux\",\"commonjs2\":\"flux\",\"amd\":\"flux\",\"root\":\"flux\"}","webpack://flux-state/./node_modules/rxjs/Observable.js","webpack://flux-state/(webpack)/buildin/global.js","webpack://flux-state/./node_modules/rxjs/util/toSubscriber.js","webpack://flux-state/./node_modules/rxjs/util/isArray.js","webpack://flux-state/./node_modules/rxjs/util/isObject.js","webpack://flux-state/./node_modules/rxjs/util/tryCatch.js","webpack://flux-state/./node_modules/rxjs/util/UnsubscriptionError.js","webpack://flux-state/./node_modules/rxjs/symbol/observable.js","webpack://flux-state/./node_modules/rxjs/util/pipe.js","webpack://flux-state/./node_modules/rxjs/util/noop.js","webpack://flux-state/./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack://flux-state/./node_modules/rxjs/SubjectSubscription.js","webpack://flux-state/./src/v2/Util.js","webpack://flux-state/./src/v2/Event.js","webpack://flux-state/./src/v2/index.js","webpack://flux-state/./src/v2/Store.js","webpack://flux-state/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__8__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__window","__self","self","WorkerGlobalScope","_root","Error","isArray_1","isObject_1","isFunction_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","Subscription","unsubscribe","this","closed","_parent","_parents","_subscriptions","_unsubscribe","errors","hasErrors","index","len","length","remove","isFunction","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","isObject","err","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","reduce","errs","rxSubscriber","for","$$rxSubscriber","__extends","b","__","constructor","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","error","complete","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","destination","isTrustedSubscriber","trustedSubscriber","SafeSubscriber","next","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","fn","obj","x","Observable_1","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","lift","operator","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","_trySubscribe","_subscribe","SubjectSubscription","asObservable","observable","Observable","source","subscribe","root_1","toSubscriber_1","observable_1","pipe_1","_isScalar","sink","toSubscriber","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","pipe","operations","_i","pipeFromArray","toPromise","g","Function","eval","nextOrObserver","Array","tryCatchTarget","tryCatcher","apply","map","toString","join","stack","message","getSymbolObservable","$$observable","noop_1","fns","input","prev","noop","subscriberIndex","Util","validateText","text","log","msg","DEBUG","console","v2_Event","Event","transformers","_classCallCheck","transformer","eventData","warn","data","__dispatch","register","_ref","eventName","atLeastDispatchOneEvent","allEvents","event","notify","v2_Store","Store","Store_classCallCheck","events","validateEventName","_len","_key","receiveLastValue","undefined","validatedEventName","__getEventState","state","eventState","assign","_defineProperty","__webpack_exports__","DashStore","DashEvent","dispatchEvent","dispatch"],"mappings":"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","file":"flux-state.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"flux\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"flux\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flux-state\"] = factory(require(\"flux\"));\n\telse\n\t\troot[\"flux-state\"] = factory(root[\"flux\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__8__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","/**\n * Validates if the input is a Valid Text\n * Non null, non undefined, non empty\n * @param text The Text to be validated\n * @returns {*} the Text if it is Valid\n * @thro\n */\nfunction validateText(text) {\n    if (typeof (text) === \"undefined\")\n        throw new Error(\"text can't be undefined\");\n    if (text === null)\n        throw new Error(\"text can't be null\");\n    if (text === \"\")\n        throw new Error(\"text can't be an empty string\");\n\n    return text;\n}\n\nexport default {\n    validateText,\n    log: (msg, obj) => {\n        if (!window.DEBUG)\n            return;\n        if (obj)\n            console.log(msg, obj);\n        else\n            console.log(msg)\n    }\n};","import utils from \"./Util\";\nimport {Subject} from 'rxjs/Subject';\n\nclass Event {\n    /**\n     * Creates a new event with a Name and some transformers\n     * @param name The name of the Event\n     * @param transformers The transformers functions\n     * @throws an Error if the transformers are not an array\n     * @throws an Error if the any if the transformers is not a function\n     * @throws an Error if the transformers return an Undefined or Null value\n     */\n    constructor(name, transformers) {\n        utils.log(\"v2/Event:constructor\");\n        this.name = utils.validateText(name);\n        this.transformers = new Array();\n        this.value = null;\n        this.subject = new Subject();\n\n        if (typeof(transformers) === \"undefined\")\n            return;\n\n        if (!Array.isArray(transformers))\n            throw new Error(\"Transformers must be an Array\");\n\n        if (transformers.length == 0)\n            throw new Error(\"Transformers Array shouldn't be empty\");\n\n        transformers.forEach(transformer => {\n            if (typeof(transformer) !== \"function\")\n                throw new Error(\"All the transformers must be functions\");\n        });\n\n        this.transformers = transformers;\n    }\n\n    /**\n     * subscribe to theis event notifications\n     * @param subscriber The function no be executed when this events its fired\n     * @return subscription An object representing the subscription to the Event\n     * @throws an Error if the subscriber is not a function\n     */\n    subscribe(subscriber) {\n        utils.log(\"v2/Event:subscribe\");\n        if (typeof(subscriber) !== \"function\")\n            throw new Error(\"subscriber must be a function\");\n        return this.subject.subscribe(subscriber);\n    }\n\n    /**\n     * It fires the ocurrency of an event, execute every transformation and  every subscriber\n     * @param eventData the data of the event\n     */\n    notify(eventData) {\n        utils.log(\"v2/Event:notify\");\n        if (this.subject.observers.length == 0) {\n            console.warn(`No subscriber for ${this.name}, no side effects generated`);\n        }\n\n        let data = eventData;\n        this.transformers.forEach(transformer => {\n            data = transformer(data);\n        });\n        this.value = data;\n        this.subject.next(this.value);\n    }\n\n}\n\n\nexport default Event;\n","import {Dispatcher} from 'flux';\nimport utils from \"./Util\";\n\nconst __dispatch = new Dispatcher();\n\nconst handleDispatch = ({eventName, eventData}) => {\n    utils.log(\"v2/index:handleDispatch\");\n    let atLeastDispatchOneEvent = false;\n    allEvents.forEach(event => {\n        if (event.name === eventName) {\n            event.notify(eventData);\n            atLeastDispatchOneEvent = true;\n        }\n    });\n\n    if (!atLeastDispatchOneEvent)\n        throw new Error(`No event: ${eventName} exists in the System`);\n};\n\n__dispatch.register(handleDispatch);\n\n/**\n * Dispatches an event to the Dispatching system\n * @param eventName The Name of the Event\n * @param eventData The data to be passed\n */\nconst dispatchEvent = (eventName, eventData) => {\n    utils.log(\"v2/index:dispatchEvent\");\n    utils.validateText(eventName);\n    __dispatch.dispatch({eventName, eventData});\n}\n\nconst allEvents = new Array();\n\nexport {allEvents, dispatchEvent};\n","import Event from './Event';\nimport {allEvents} from './index';\nimport utils from './Util';\n\nclass Store {\n    constructor() {\n        utils.log(\"v2/Store:constructor\");\n        this.events = [];\n    }\n\n    /**\n     * Create and Add a new Event to this store Events list\n     * @param eventName The event Name\n     * @param transformers the transformers functions\n     * @throws an Error if there is already an event with the same name\n     */\n    addEvent(eventName, ...transformers) {\n        utils.log(\"v2/Store:addEvent\");\n        const validateEventName = utils.validateText(eventName);\n\n        //Check for duplicated names on the Store\n        this.events.forEach(event => {\n            if (event.name === validateEventName) {\n                throw new Error(`STORE: An event named: ${validateEventName} already exists on the Store`);\n            }\n        });\n        let e;\n        if (transformers.length > 0)\n            e = new Event(eventName, transformers);\n        else\n            e = new Event(eventName);\n        this.events.push(e);\n        allEvents.push(e);\n    }\n\n    /**\n     * Subscribe to an Event to receive their updates\n     * @param eventName The Event Name to which you want to subscribe\n     * @param subscriber The subscriber function that's gonna be executed when it happends\n     * @param receiveLastValue Whether the subscriber\n     * @return subscription The subscription for this event in the Store\n     * @throws an Error if the event does not exists\n     * @throws an Error if the subscriber is not a function\n     */\n    subscribe(eventName, subscriber, receiveLastValue = false) {\n        utils.log(\"v2/Store:subscribe\");\n        const validatedEventName = utils.validateText(eventName);\n\n        if (typeof(subscriber) !== `function`)\n            throw new Error(`subscriber must be a function`);\n\n        for (let i = 0; i < this.events.length; i++) {\n            const event = this.events[i];\n            if (event.name === validatedEventName) {\n                const subscription = event.subscribe(subscriber);\n                if (receiveLastValue)\n                    subscriber(event.value);\n                return subscription;\n            }\n        }\n        throw new Error(`Non existent eventName: ${validatedEventName} on Store`);\n    }\n\n    /**\n     * Get the state of the Store\n     * This is the last know value of each event\n     */\n    getState(eventName) {\n        utils.log(\"v2/Store:getState\");\n        if (!(eventName === undefined || eventName === null))\n            return this.__getEventState(eventName);\n\n        let state = {};\n        this.events.forEach(event => {\n            const eventState = event.value;\n            const eventName = event.name;\n            state = Object.assign(state, {[eventName]: eventState})\n        });\n        return state;\n    }\n\n    /**\n     * Get the state of a particular event\n     * This is the last know value of the event\n     */\n    __getEventState(eventName) {\n        utils.log(\"v2/Store:__getEventState\");\n        for (let i = 0; i < this.events.length; i++)\n            if (this.events[i].name === eventName)\n                return this.events[i].value;\n        throw new Error(`Non existent eventName: ${eventName} on Store`);\n    }\n\n    /**\n     * Clears all the values of the events in the Store\n     */\n    clearState() {\n        utils.log(\"v2/Store:clearState\");\n        this.events.forEach(event => event.value = null);\n    }\n}\n\nexport default Store;","import DashStore from \"./v2/Store\";\nimport DashEvent from \"./v2/Event\";\nimport {dispatchEvent} from './v2/index'\n\n\nexport default {DashStore, DashEvent, dispatchEvent};\n"],"sourceRoot":""}